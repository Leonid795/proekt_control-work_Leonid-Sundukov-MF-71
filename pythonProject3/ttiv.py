import telebot
import random
import logging
from telebot import types

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8122671416:AAGfwP4wLrG-cPeKyv3XVrKxlklIHv99JF8"
bot = telebot.TeleBot(TOKEN)

user_data = {}

def generate_task():
    operations = ['+', '-', '*', '/']
    num1 = random.randint(1, 20)
    num2 = random.randint(1, 20)
    op = random.choice(operations)

    if op == '/':
        num1 = num1 * num2  # –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è

    task = f"{num1} {op} {num2}"

    if op == '+':
        answer = num1 + num2
    elif op == '-':
        answer = num1 - num2
    elif op == '*':
        answer = num1 * num2
    else:
        answer = num1 // num2

    return task, answer

def create_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("/start"))
    keyboard.add(types.KeyboardButton("/help"))
    keyboard.add(types.KeyboardButton("/score"))
    keyboard.add(types.KeyboardButton("/stop"))
    return keyboard

def start_game(chat_id: int, username: str):
    task, answer = generate_task()
    user_data[chat_id] = {
        'task': task,
        'answer': answer,
        'score': 0,
        'username': username
    }
    bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ø–æ –ª–µ–≥–∫–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.", reply_markup=create_keyboard())
    bot.send_message(chat_id, f"–†–µ—à–∏ –∑–∞–¥–∞–Ω–∏–µ:\n{task}\n\n–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º.", reply_markup=create_keyboard())

@bot.message_handler(commands=['start'])
def start_handler(message):
    chat_id = message.chat.id
    username = message.from_user.first_name or "–∏–≥—Ä–æ–∫"
    start_game(chat_id, username)

@bot.message_handler(commands=['help'])
def help_handler(message):
    chat_id = message.chat.id
    help_text = (
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ª–µ–≥–∫–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/score - –ø–æ–∫–∞–∑–∞—Ç—å —Å—á–µ—Ç\n"
        "/stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–π –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º."
    )
    bot.send_message(chat_id, help_text, reply_markup=create_keyboard())

@bot.message_handler(commands=['score'])
def score_handler(message):
    chat_id = message.chat.id
    score = user_data.get(chat_id, {}).get('score', 0)
    bot.send_message(chat_id, f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {score}", reply_markup=create_keyboard())

@bot.message_handler(commands=['stop'])
def stop_handler(message):
    chat_id = message.chat.id
    if chat_id in user_data:
        del user_data[chat_id]
    bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å /start.", reply_markup=create_keyboard())

@bot.message_handler(func=lambda message: True)
def answer_handler(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if chat_id not in user_data:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start.", reply_markup=create_keyboard())
        return

    if not (text.lstrip('-').isdigit()):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç.", reply_markup=create_keyboard())
        return

    user_answer = int(text)
    correct_answer = user_data[chat_id]['answer']

    if user_answer == correct_answer:
        user_data[chat_id]['score'] += 1
        score = user_data[chat_id]['score']
        bot.send_message(chat_id, f"–í–µ—Ä–Ω–æ! üéâ –¢–≤–æ–π —Å—á–µ—Ç: {score}", reply_markup=create_keyboard())
        task, answer = generate_task()
        user_data[chat_id]['task'] = task
        user_data[chat_id]['answer'] = answer
        bot.send_message(chat_id, f"–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{task}\n–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º.", reply_markup=create_keyboard())
    else:
        bot.send_message(chat_id, f"–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.\n–ó–∞–¥–∞–Ω–∏–µ: {user_data[chat_id]['task']}", reply_markup=create_keyboard())

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()
